package biz.cccm.mgmt.registration.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import org.joda.time.DateTime;
import biz.cccm.mgmt.registration.dao.exceptions.NonexistentEntityException;
import biz.cccm.mgmt.registration.model.Person;
import biz.cccm.mgmt.registration.service.PersonManager;
import biz.cccm.webapp.action.BasePage;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;

import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;
import biz.cccm.mgmt.registration.model.Church;
import biz.cccm.mgmt.registration.model.Family;
import biz.cccm.mgmt.registration.model.Mealplan;
import biz.cccm.mgmt.registration.model.Payment;
import biz.cccm.mgmt.registration.model.Profile;
import biz.cccm.mgmt.registration.service.ChurchManager;
import biz.cccm.mgmt.registration.service.FamilyManager;
import biz.cccm.mgmt.registration.service.MealplanManager;
import biz.cccm.mgmt.registration.service.PaymentManager;
import biz.cccm.mgmt.registration.service.ProfileManager;
import ws.cccm.reg.service.NameTag;
import ws.cccm.reg.service.NameTagService;
import ws.cccm.reg.service.NameTagServiceImpl;

/**
 * JSF Page class to handle editing a user with a form.
 *
 * @author chehhoo
 */
public class PersonForm extends BasePage implements Serializable {

    private static final long serialVersionUID = -1141119853856863205L;

    private PersonManager personManager;
    private FamilyManager familyManager;
    private ProfileManager profileManager;
    private MealplanManager mealplanManager;
    private ChurchManager churchManager;
    private PaymentManager paymentManager;
//    private NameTagService nametagService;

    private String id;
    private Person person = new Person();
    private Family family = new Family();
    private Profile profile = new Profile();
    private Mealplan mealplan = new Mealplan();
    private Payment payment;
    private Payment[] payments;

    //Generated by Map
    private static final Map<String, String> languageList;

    static {
        languageList = new LinkedHashMap<String, String>();
        languageList.put("\u4E2D\u6587\u5927\u4F1A", "M");
        languageList.put("Grace Conference", "E");
        languageList.put("1-5th", "C");
        languageList.put("3yrs-K", "K");
        languageList.put("1-2yrs", "T");
    }
    //Generated by Map
    private static final Map<String, String> statusGroup;

    static {
        statusGroup = new LinkedHashMap<String, String>();
        statusGroup.put("F(\u5168\u8077\u50B3\u9053)", "F");
        statusGroup.put("P(\u6559\u6703\u7267\u8005)", "P");
        statusGroup.put("T(\u795E\u5B78\u751F)", "T");
        statusGroup.put("N(\u6A5F\u69CB\u540C\u5DE5)", "N");
        statusGroup.put("C(\u6821\u5712\u540C\u5DE5)", "C");
        statusGroup.put("E(\u6559\u6703\u9577\u57F7)", "E");
        statusGroup.put("S(\u5C0F\u7D44\u6216\u5718\u5951\u540C\u5DE5)", "S");
        statusGroup.put("O(\u5176\u4ED6)", "O");
        statusGroup.put("-- Status(English Conf) --", "");
        statusGroup.put("Married", "M");
        statusGroup.put("Engaged", "EN");
        statusGroup.put("Single", "SG");
        statusGroup.put("Graduate School", "GS");
        statusGroup.put("Undergrad - Sr", "C4");
        statusGroup.put("Undergrad - Jr", "C3");
        statusGroup.put("Undergrad - So", "C2");
        statusGroup.put("Undergrad - Fr", "C1");
        statusGroup.put("Senior High - Sr", "12th");
        statusGroup.put("Senior High - Jr", "11th");
        statusGroup.put("Senior High - So", "10th");
        statusGroup.put("Senior High - Fr", "9th");
        statusGroup.put("Junior High - 8th grade", "8th");
        statusGroup.put("Junior High - 7th grade", "7th");
        statusGroup.put("Junior High - 6th grade", "6th");
        statusGroup.put("5th grade", "5th");
        statusGroup.put("4th grade", "4th");
        statusGroup.put("3rd grade", "3rd");
        statusGroup.put("2nd grade", "2nd");
        statusGroup.put("1st grade", "1st");
        statusGroup.put("Kindergarden", "K");
        statusGroup.put("Preschool 4yrs", "P4");
        statusGroup.put("Preschool 3yrs", "P3");
        statusGroup.put("Toddlers (age 1-2)", "TO");
        statusGroup.put("Baby < 1", "B");
        statusGroup.put("Other", "O");  
    }

    private static final Map<String, String> ageGroup;

    static {
        ageGroup = new LinkedHashMap<String, String>();
        ageGroup.put("18-29", "A2");
        ageGroup.put("30-39", "A3");
        ageGroup.put("40-49", "A4");
        ageGroup.put("50-59", "A5");
        ageGroup.put("60+", "A6");
        ageGroup.put("17", "17");
        ageGroup.put("16", "16");
        ageGroup.put("15", "15");
        ageGroup.put("14", "14");
        ageGroup.put("13", "13");
        ageGroup.put("12", "12");
        ageGroup.put("11", "11");
        ageGroup.put("10", "10");
        ageGroup.put("9", "9");
        ageGroup.put("8", "8");
        ageGroup.put("7", "7");
        ageGroup.put("6", "6");
        ageGroup.put("5", "5");
        ageGroup.put("4", "4");
        ageGroup.put("3", "3");
        ageGroup.put("2", "2");
        ageGroup.put("1", "1");
        ageGroup.put("0", "0");

    }

    /**
     * @return the languageList
     */
    public Map getLanguageList() {
        return languageList;
    }

    /**
     * @return the statusGroup
     */
    public Map getStatusGroup() {
        return statusGroup;
    }

    /**
     * @return the ageGroup
     */
    public Map getAgeGroup() {
        return ageGroup;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setPersonManager(PersonManager personManager) {
        this.personManager = personManager;
    }

    public void setFamilyManager(FamilyManager familyManager) {
        this.familyManager = familyManager;
    }

    public void setProfileManager(ProfileManager profileManager) {
        this.profileManager = profileManager;
    }

    /**
     * @param mealplanManager the mealplanManager to set
     */
    public void setMealplanManager(MealplanManager mealplanManager) {
        this.mealplanManager = mealplanManager;
    }

    /**
     * @param churchManager the churchManager to set
     */
    public void setChurchManager(ChurchManager churchManager) {
        this.churchManager = churchManager;
    }

    /**
     * @param paymentManager the paymentManager to set
     */
    public void setPaymentManager(PaymentManager paymentManager) {
        this.paymentManager = paymentManager;
    }

//     /**
//     * @param nametagService
//     */
//    public void setNameTagService(NameTagService nametagService) {
//        this.nametagService = nametagService;
//    }
//    
    public Person getPerson() {
//        FacesContext fc = FacesContext.getCurrentInstance();
//        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
//        for (Map.Entry pairs : params.entrySet()) {
//            log.debug(pairs.getKey() + " = " + pairs.getValue());
//        }
        log.debug("getting person, id is: " + id + " | " + person.getPersonID());
//        if (person == null) {
//            person = personManager.getPerson(id);
//        }
        return person;
    }

    public void setPerson(Person person) {
        this.person = person;
    }

    public String add() {

        person = new Person();

        DateTime now = new DateTime();
        person.setLastModified(now.toDate());
        person.setPersonID(null);

        payment = new Payment();
        payments = new Payment[0];

        return "editPerson";
    }

    public String edit() {

        log.debug("getting person, id is: " + id);

        try {

            person = personManager.getPerson(Integer.parseInt(id));

            profile = profileManager.getProfile(Integer.parseInt(id));

            if (profile.getChurchName() == null || profile.getChurchName().isEmpty()
                    && profile.getChurchID() != null) {
                Church church = churchManager.getChurch(profile.getChurchID());
                if (church != null) {
                    profile.setChucrhName(church.getChurchNameChn());
                }
            }

            family = familyManager.getFamily(person.getFamilyID());

            if (profile.getRegistrationID() != null && !profile.getRegistrationID().isEmpty()) {
                log.info("Registration ID:" + profile.getRegistrationID());
                String regId = profile.getRegistrationID();
                if (mealplanManager.exists(regId)) {
                    mealplan = mealplanManager.getMealplan(regId);
                } else {
                    mealplan = new Mealplan();
                    mealplan.setRegistrationID(regId);
                }
            }

            List<Payment> paymentList = paymentManager.getPaymentsByRegistrationID(Long.parseLong(profile.getRegistrationID()));

            if (paymentList != null && !paymentList.isEmpty()) {

                payments = new Payment[paymentList.size()];
                payment = paymentList.get(0);
                int i = 0;

                if (payments.length > 0) {
                    for (Payment pm : paymentList) {
                        payments[i] = pm;
                        i++;
                    }
                }
            } else {
                payment = new Payment();
                payments = new Payment[0];
            }
        } catch (NonexistentEntityException ex) {
            log.fatal(message);
        }
        return "editPerson";
    }

    public String save() throws IOException {

        log.info("getting person, id is: " + id + " | " + person.getPersonID());

        if (person.getPersonID() != null && person.getPersonID() > 0) {
            saveExistingPerson();
        } else {
            saveNewPerson();
        }

        log.debug("Exit after saved...");

        return "list";
    }

    public String delete() {

        Integer familyId;
        familyId = person.getFamilyID();
        String regId;
        regId = profile.getRegistrationID();

        personManager.removePerson(person);
        profileManager.removeProfile(profile);

        try {
            if (personManager.getPersonsByFamilyID(familyId).isEmpty()) {
            }
        } catch (NonexistentEntityException ex) {
            log.error("NonexistentEntityException:" + ex);
            familyManager.removeFamily(familyId);
            mealplanManager.removeMealplan(regId);
        }

        addMessage("person.deleted", regId);

        return "list";
    }

    public String cancel() {
        if (log.isDebugEnabled()) {
            log.debug("Entering 'cancel' method");
        }

        if (!"list".equals(getParameter("from"))) {
            return "home";
        } else {
            return "list";
        }
    }

    public String nametag() {
        try {

            Set<NameTag> printRequest = new LinkedHashSet<>();
            NameTag nameTag = new NameTag();
            nameTag.setChineseFullName(person.getChineseName());
            nameTag.setEnglishFullName(person.getFirstName() + " " + person.getLastName());
            nameTag.setChruchName(profile.getChurchName());
            nameTag.setCenterId(profile.getRegistrationID());
            nameTag.setAddress(family.getHomeCity() + "," + family.getHomeState());
            nameTag.setBarcodeId(profile.getPersonID().toString());
            printRequest.add(nameTag);

            NameTagService nameTagService = new NameTagServiceImpl();
            byte[] pdf = nameTagService.generateNameTagPrints(printRequest, 8);

            if (!Files.notExists(Paths.get("C:\\Temp\\nametag.pdf"))) {
                Files.delete(Paths.get("C:\\Temp\\nametag.pdf"));
            }
            Files.write(Paths.get("C:\\Temp\\nametag.pdf"), pdf, StandardOpenOption.CREATE_NEW);

//            File file = new File("C:\\Temp\\nametag.pdf");
//            InputStream fis = new FileInputStream(file);
//            byte[] buf = new byte[1024];
//            int offset = 0;
//            int numRead = 0;
//            while ((offset < buf.length) && ((numRead = fis.read(buf, offset, buf.length - offset)) >= 0)) {
//                offset += numRead;
//            }
//            fis.close();
            HttpServletResponse response
                    = (HttpServletResponse) FacesContext.getCurrentInstance()
                    .getExternalContext().getResponse();

            response.setContentType("application/octet-stream");
            response.setHeader("Content-Disposition", "attachment;filename=nametag.pdf");
            response.getOutputStream().write(pdf);
            response.getOutputStream().flush();
            response.getOutputStream().close();
            FacesContext.getCurrentInstance().responseComplete();
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(PersonForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return "list";
    }

    private void saveNewPerson() {

        if (person.getFamilyID() == null && person.getFamilyID() < 0) {
            addError("Please provide family ID to add this person");
            return;
        }

        try {
            List<Profile> familyMember = profileManager.getProfileByFamilyID(person.getFamilyID());

            if (familyMember == null || familyMember.isEmpty()) {
                addError("Family ID not exist in system");
                return;
            }

            person.setPersonID(null);
            Person p = personManager.savePerson(person);

            profile.setPersonID(p.getPersonID());
            profile.setFamilyID(p.getFamilyID());
            profile.setLastModified(new Date());
            profile.setRegistrationID(familyMember.get(0).getRegistrationID());
            profile.setRegisteredDate(new Date());
            profile.setChurchID(familyMember.get(0).getChurchID());

            profileManager.saveProfile(profile);

            // add success messages
            addMessage("person.saved");

        } catch (NonexistentEntityException ex) {
            log.error("NonexistentEntityException: " + ex.getMessage());
        }
    }

    private void saveExistingPerson() {

        DateTime now = new DateTime();
        person.setLastModified(now.toDate());

        try {
            personManager.savePerson(person);

            // Profile
            Profile existingProfile = profileManager.getProfile(person.getPersonID());
            if (existingProfile == null || !profile.equals(existingProfile)) {
                log.info("Profile - Person ID:" + profile.getPersonID());
                profileManager.saveProfile(profile);
            }
            //Family 
            if (family != null) {
                log.info("Family ID:" + family.getFamilyID());
                log.info("HeadOfFamily:" + family.getHeadOfFamilyPersonID());
                log.info("ChurchID:" + family.getChurchID());
                log.info("FamilyName:" + family.getFamilyName());
                log.info("HomeAddress:" + family.getHomeAddress());
                log.info("HomeAddress2:" + family.getHomeAddress2());
                log.info("HomeCity:" + family.getHomeCity());
                log.info("HomeState:" + family.getHomeState());
                log.info("HomeZip:" + family.getHomeZip());
                log.info("Country:" + family.getCountry());
                log.info("HomePhone:" + family.getHomePhone());
                log.info("HomeFax:" + family.getHomeFax());
                log.info("Newsletter:" + family.getNewsletter());
                log.info("LastModified:" + family.getLastModified());
                log.info("Misc1:" + family.getMisc1());
                log.info("Misc2:" + family.getMisc2());
                log.info("Misc3:" + family.getMisc3());
            }

            Family existingFamily = familyManager.getFamily(person.getFamilyID());
            if (!family.equals(existingFamily)) {
                family.setLastModified(now.toDate());
                familyManager.saveFamily(family);
            }

            // Mealplan
            Mealplan existingMealplan = mealplanManager.getMealplan(profile.getRegistrationID());
            if (existingMealplan == null || !mealplan.equals(existingMealplan)) {
                mealplanManager.saveMealplan(mealplan);

                ArrayList<Payment> paymentList = (ArrayList<Payment>) paymentManager.getPaymentsByRegistrationID(Long.parseLong(mealplan.getRegistrationID()));

                if (paymentList != null && !paymentList.isEmpty()) {

                    Collections.sort(paymentList, new Comparator<Payment>() {
                        @Override
                        public int compare(final Payment lhs, Payment rhs) {
                            // return 1 if rhs should be before lhs 
                            if (rhs.getId() < lhs.getId()) {
                                return 1;
                                // return -1 if lhs should be before rhs
                            } else if (rhs.getId() > lhs.getId()) {
                                return -1;
                            }
                            //     return 0 otherwise
                            return 0;
                        }
                    });

                    payment = paymentList.get(0);
                    Double newFee = calculateMealFee(mealplan);
                    payment.setMealFee(newFee);

                    paymentManager.savePayment(payment);
                }
            }

            // add success messages
            addMessage("person.saved");
        } catch (NonexistentEntityException e) {
            addError("person.updated.error", person.getFirstName());
            log.error("NonexistentEntityException: " + e.getMessage());
        }
    }

    /**
     * @return the family
     */
    public Family getFamily() {
        return family;
    }

    /**
     * @param family the family to set
     */
    public void setFamily(Family family) {
        this.family = family;
    }

    /**
     * @return the profile
     */
    public Profile getProfile() {
        return profile;
    }

    /**
     * @param profile the profile to set
     */
    public void setProfile(Profile profile) {
        this.profile = profile;
    }

    /**
     * @return the mealplan
     */
    public Mealplan getMealplan() {
        return mealplan;
    }

    /**
     * @param mealplan the mealplan to set
     */
    public void setMealplan(Mealplan mealplan) {
        this.mealplan = mealplan;
    }

    private Double calculateMealFee(Mealplan mp) {

        // >>>>>>>>>>>>>>>>>>>>> Meal fee >>>>>>>>>>>>>>>>>>>>>     
        Double breakfastFee = 5.0;
        Double lunchFee = 6.0;
        Double dinnerFee = 9.0;

        Integer breakfastCount = (mp.getBreakfast1() != null ? mp.getBreakfast1() : 0)
                + (mp.getBreakfast2() != null ? mp.getBreakfast2() : 0)
                + (mp.getBreakfast3() != null ? mp.getBreakfast3() : 0)
                + (mp.getBreakfast4() != null ? mp.getBreakfast4() : 0)
                + (mp.getBreakfast5() != null ? mp.getBreakfast5() : 0);

        Double totalBreakfastFee = breakfastCount * breakfastFee;

        Integer lunchCount = (mp.getLunch1() != null ? mp.getLunch1() : 0)
                + (mp.getLunch2() != null ? mp.getLunch2() : 0)
                + (mp.getLunch3() != null ? mp.getLunch3() : 0)
                + (mp.getLunch4() != null ? mp.getLunch4() : 0)
                + (mp.getLunch5() != null ? mp.getLunch5() : 0);

        Double totalLunchFee = lunchCount * lunchFee;

        Integer dinnerCount = (mp.getDinner1() != null ? mp.getDinner1() : 0)
                + (mp.getDinner2() != null ? mp.getDinner2() : 0)
                + (mp.getDinner3() != null ? mp.getDinner3() : 0)
                + (mp.getDinner4() != null ? mp.getDinner4() : 0)
                + (mp.getDinner5() != null ? mp.getDinner5() : 0);

        Double totalDinnerFee = dinnerCount * dinnerFee;
        // Grand total
        Double totalMealsFee = totalBreakfastFee + totalLunchFee + totalDinnerFee;

        return totalMealsFee;
    }

    /**
     * @return the payment
     */
    public Payment getPayment() {
        return payment;
    }

    /**
     * @param payment the payment to set
     */
    public void setPayment(Payment payment) {
        this.payment = payment;
    }

    /**
     * @return the payments
     */
    public Payment[] getPayments() {
        return payments;
    }

    /**
     * @param payments the payments to set
     */
    public void setPayments(Payment[] payments) {
        this.payments = payments;
    }

}
